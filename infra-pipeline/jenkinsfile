pipeline {
    agent any

    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Choose whether to apply or destroy Terraform infrastructure'
        )
    }

    environment {
        PROJECT_ID = 'gke-springboot-472605'
        REGION     = 'asia-south1'
        ZONE       = 'asia-south1-b'
        CLUSTER    = 'gke-cluster'
    }

    stages {
        stage('Checkout Infra Code') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/GKE-Springboot.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir('terraform') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    script {
                        if (params.ACTION == 'apply') {
                            sh 'terraform plan -out=tfplan'
                        } else {
                            sh 'terraform plan -destroy -out=tfplan'
                        }
                    }
                }
            }
        }

        stage('Terraform Execute') {
            steps {
                dir('terraform') {
                    script {
                        if (params.ACTION == 'apply') {
                            input message: "Apply Terraform changes?"
                            sh 'terraform apply -auto-approve tfplan'
                        } else {
                            input message: "Destroy Terraform infrastructure?"
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }

        stage('Configure Kubectl') {
            when { expression { params.ACTION == 'apply' } }
            steps {
                sh """
                    gcloud container clusters get-credentials ${CLUSTER} \
                        --region ${REGION} \
                        --project ${PROJECT_ID}

                    kubectl get nodes
                """
            }
        }

        stage('Install Prometheus & Grafana') {
            when { expression { params.ACTION == 'apply' } }
            steps {
                sh """
                    # Create monitoring namespace
                    kubectl create namespace monitoring || true

                    # Add Helm repo for Prometheus & Grafana
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo update

                    # Install Prometheus
                    helm upgrade --install prometheus prometheus-community/prometheus \
                        --namespace monitoring \
                        --set alertmanager.persistentVolume.enabled=false \
                        --set server.persistentVolume.enabled=false

                    # Install Grafana
                    helm upgrade --install grafana grafana/grafana \
                        --namespace monitoring \
                        --set persistence.enabled=false \
                        --set adminPassword='admin' \
                        --set service.type=LoadBalancer

                    kubectl get pods -n monitoring
                """
            }
        }
    }

    post {
        success {
            echo "✅ Terraform ${params.ACTION} + Monitoring setup completed successfully!"
        }
        failure {
            echo "❌ Terraform ${params.ACTION} pipeline failed!"
        }
    }
}
